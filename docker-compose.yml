version: '3.4'

services:
  db:
    image: postgres
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - PGUSER=${POSTGRES_USER}
    ports:
      - '127.0.0.1:${POSTGRES_PORT}:5432'
    volumes: 
      - ./.data/postgres:/var/lib/postgresql/data
      - ./migrations/base.sql:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
      - titanic
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  cache:
    image: redis:7.2-rc
    restart: unless-stopped
    ports:
      - '127.0.0.1:${REDIS_PORT}:6379'
    command: redis-server --save 20 1
    networks:
      - titanic
    volumes: 
      - ./.data/redis:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  anchor:
    build: ./bancho
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=cache
    networks:
      - titanic
    links:
      - db:db
      - cache:cache
    ports:
      - 13381:13381
      - 13382:13382
      - 13383:13383
    healthcheck:
      test: "curl -sS http://127.0.0.1:13381 || exit 1"
      interval: 15s
      timeout: 5s
      retries: 5
    volumes:
      - ./.data:/bancho/.data
      - ./.data/logs/bancho:/bancho/logs
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy

  deck:
    build: ./web/deck
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=cache
    networks:
      - titanic
    links:
      - db:db
      - cache:cache
    ports:
      - ${WEB_PORT}:80
    healthcheck:
      test: "curl -sS http://127.0.0.1:${WEB_PORT} || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
    volumes:
      - ./.data:/deck/.data
      - ./.data/logs/deck:/deck/logs
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy

  bot:
    build: ./bot
    restart: unless-stopped
    env_file:
      - '.env'
    environment:
      - POSTGRES_HOST=db
      - REDIS_HOST=cache
    networks:
      - titanic
    links:
      - db:db
      - cache:cache
    volumes:
      - ./.data:/bot/.data
      - ./.data/logs/bot:/bot/logs
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy

networks:
  titanic:
    driver: bridge
